{"version":3,"file":"static/js/301.bafa8994.chunk.js","mappings":"gPAGMA,GAASC,EAAAA,EAAAA,IAAH,wFAUCC,EAAYC,EAAAA,GAAAA,IAAH,qNAaTC,GAAUD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,sTAWLH,GAGFM,EAAQH,EAAAA,GAAAA,GAAH,iOAcLI,EAAQJ,EAAAA,GAAAA,MAAH,wKAWLK,EAAOL,EAAAA,GAAAA,KAAH,gIAQJM,GAAQN,EAAAA,EAAAA,IAAOO,EAAAA,GAAPP,CAAH,iUAkBLQ,EAAmBR,EAAAA,GAAAA,EAAH,qJAWhBS,EAAeT,EAAAA,GAAAA,OAAH,8gB,SChBzB,EArEiB,SAAC,GAAiC,IAA/BU,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAC3BC,EAAgBF,EAAOG,QAAO,SAACC,EAAKC,GAExC,OADAD,EAAIC,GAAS,GACND,CACR,GAAE,CAAC,GAEEE,GAAmBC,EAAAA,EAAAA,IACvBP,EAAOG,QAAO,SAACC,EAAKC,GAkBlB,MAjBc,SAAVA,IACFD,EAAIC,IAASG,EAAAA,EAAAA,MACVC,SADU,UACEJ,EADF,iBAEVK,IAAI,EAFM,UAEAL,EAFA,kBAGVM,IAAI,GAHM,UAGCN,EAHD,kBAMD,UAAVA,IACFD,EAAIC,IAASG,EAAAA,EAAAA,MACVI,MAAM,iBACNH,SAAS,sBAGA,aAAVJ,IACFD,EAAIC,IAASG,EAAAA,EAAAA,MAASC,SAAS,yBAG1BL,CACR,GAAE,CAAC,IAGAS,GAAWC,EAAAA,EAAAA,MAOjB,OACE,SAAC1B,EAAD,WACE,SAAC,KAAD,CACEc,cAAeA,EACfD,SATe,SAACc,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BH,EAASZ,EAASc,IAClBC,GACD,EAOKV,iBAAkBA,EAHpB,UAKE,UAAChB,EAAD,CAAS2B,aAAa,MAAtB,WACE,SAACzB,EAAD,UAAQO,IACPC,EAAOkB,KAAI,SAAAb,GAAK,OACf,UAACZ,EAAD,YACE,UAACC,EAAD,WACa,SAAVW,IAAoB,SAAC,MAAD,CAAWc,KAAM,KAC3B,UAAVd,IAAqB,SAAC,MAAD,CAAQc,KAAM,KACzB,aAAVd,IAAwB,SAAC,MAAD,CAAoBc,KAAM,KAClDd,EAAMe,OAAO,GAAGC,cAAgBhB,EAAMiB,MAAM,OAE/C,SAAC3B,EAAD,CACE4B,YAAW,4BAAuBlB,GAClCmB,KAAgB,aAAVnB,EAAuB,WAAa,OAC1CoB,KAAMpB,KAER,SAAC,KAAD,CAAcqB,UAAW7B,EAAkB4B,KAAMpB,MAZvCA,EADG,KAgBjB,SAACP,EAAD,CAAc0B,KAAK,SAAnB,SACa,iBAAVzB,EAA2B,UAAY,iBAMnD,C,yHChED,EAjBqB,WACnB,IAAMc,GAAWC,EAAAA,EAAAA,MAOjB,OACE,SAACa,EAAA,EAAD,CACE5B,MAAM,eACNC,OAAQ,CAAC,OAAQ,QAAS,YAC1BC,SATa,SAAAc,GACf,IAAQU,EAA0BV,EAA1BU,KAAMb,EAAoBG,EAApBH,MAAOgB,EAAab,EAAba,SACrBf,GAASgB,EAAAA,EAAAA,IAAS,CAAEJ,KAAAA,EAAMb,MAAAA,EAAOgB,SAAAA,IAClC,GASF,E,UCCD,EAhBiB,WACf,IAAQE,GAAcC,EAAAA,EAAAA,MAAdD,UACAE,GAAcC,EAAAA,EAAAA,MAAdD,UAER,OACE,iCACE,SAACE,EAAA,EAAD,WACE,8CAGDJ,IAAa,SAACE,EAAD,KACd,SAAC,EAAD,MAGL,C","sources":["components/AuthForm/AuthForm.styled.jsx","components/AuthForm/AuthForm.js","components/RegisterForm/RegisterForm.js","pages/Register.js"],"sourcesContent":["import { Field, Form } from 'formik';\nimport styled, { keyframes } from 'styled-components';\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100vh;\n  max-width: 500px;\n  margin: 0 auto;\n  padding: 10px;\n`;\n\n\nexport const FormBox = styled(Form)`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  width: 100%;\n  padding: 20px;\n  \n  font-size: calc(var(--index) * 2);\n  border-radius: 15px;\n  background: #e3e3e3;\n  box-shadow: 16px 16px 32px #c8c8c8, -16px -16px 32px #fefefe;\n  animation: ${fadeIn} 0.5s ease;\n`;\n\nexport const Title = styled.h2`\n  display: block;\n  margin-bottom: 15px;\n  \n  text-transform: uppercase;\n  letter-spacing: 2px;\n  font-weight: bold;\n  color: #000;\n  \n  @media (min-width: 481px) {\n    font-size: 30px;\n  }\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin: 10px 0;\n  width: 100%;\n  \n  @media (min-width: 481px) {\n    font-size: 1.2rem;\n  }\n`;\n\nexport const Text = styled.span`\n  display: flex;\n  gap: 5px;\n  align-items: end;\n  justify-content: center;\n  margin-bottom: 10px;\n`;\n\nexport const Input = styled(Field)`\n  width: 100%;\n  padding: 10px;\n  \n  border: none;\n  border-radius: 10px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n  transition: box-shadow 0.2s ease;\n  \n  &::placeholder {\n    font-size: 15px;\n  }\n  &:focus {\n    outline: none;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.8);\n  }\n`;\n\nexport const ErrorMessageText = styled.p`\n  text-align: center;\n  margin-top: 10px;\n  \n  color: red;\n  \n  @media (min-width: 481px) {\n    font-size: 17px;\n  }\n`;\n\nexport const SubmitButton = styled.button`\n  height: calc(var(--index) * 4);\n  cursor: pointer;\n  \n  letter-spacing: 2px;\n  text-transform: uppercase;\n  border: 2px solid #000;\n  background-color: transparent;\n  border-radius: 5px;\n  transition: 0.5s;\n  \n  @media (min-width: 481px) {\n    font-size: 20px;\n    width: 50%;\n    height: 45px;\n    margin-top: 10px;\n  }\n  \n  &:hover {\n    background-color: rgb(0, 0, 0);\n    color: white;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0);\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n","import { ErrorMessage, Formik } from 'formik';\nimport { FaUserAlt } from 'react-icons/fa';\nimport { FiMail } from 'react-icons/fi';\nimport { RiLockPasswordFill } from 'react-icons/ri';\nimport { useDispatch } from 'react-redux';\nimport { object, string } from 'yup';\nimport {\n  Container,\n  ErrorMessageText,\n  FormBox,\n  Input,\n  Label,\n  SubmitButton,\n  Text,\n  Title,\n} from './AuthForm.styled';\n\nconst AuthForm = ({ title, fields, onSubmit }) => {\n  const initialValues = fields.reduce((acc, field) => {\n    acc[field] = '';\n    return acc;\n  }, {});\n\n  const validationSchema = object(\n    fields.reduce((acc, field) => {\n      if (field === 'name') {\n        acc[field] = string()\n          .required(`${field} is required`)\n          .min(2, `${field} is too short`)\n          .max(25, `${field} is too long`);\n      }\n\n      if (field === 'email') {\n        acc[field] = string()\n          .email('Invalid email')\n          .required('Email is required');\n      }\n\n      if (field === 'password') {\n        acc[field] = string().required('Password is required');\n      }\n\n      return acc;\n    }, {})\n  );\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(onSubmit(values));\n    resetForm();\n  };\n\n  return (\n    <Container>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={validationSchema}\n      >\n        <FormBox autoComplete=\"off\">\n          <Title>{title}</Title>\n          {fields.map(field => (\n            <Label key={field}>\n              <Text>\n                {field === 'name' && <FaUserAlt size={20} />}\n                {field === 'email' && <FiMail size={20} />}\n                {field === 'password' && <RiLockPasswordFill size={20} />}\n                {field.charAt(0).toUpperCase() + field.slice(1)}\n              </Text>\n              <Input\n                placeholder={`Please enter your ${field}`}\n                type={field === 'password' ? 'password' : 'text'}\n                name={field}\n              />\n              <ErrorMessage component={ErrorMessageText} name={field} />\n            </Label>\n          ))}\n          <SubmitButton type=\"submit\">\n            {title === 'Registration' ? 'Sign Up' : 'Log In'}\n          </SubmitButton>\n        </FormBox>\n      </Formik>\n    </Container>\n  );\n};\nexport default AuthForm;\n","import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport AuthForm from 'components/AuthForm';\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const onSubmit = values => {\n    const { name, email, password } = values;\n    dispatch(register({ name, email, password }));\n  };\n\n  return (\n    <AuthForm\n      title=\"Registration\"\n      fields={['name', 'email', 'password']}\n      onSubmit={onSubmit}\n    />\n  );\n};\n\nexport default RegisterForm;\n","import { Helmet } from 'react-helmet';\nimport RegisterForm from 'components/RegisterForm';\nimport { useAuth, useLoaders } from 'hooks';\n\nconst Register = () => {\n  const { isLoading } = useAuth();\n  const { LoaderBig } = useLoaders();\n\n  return (\n    <>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n\n      {isLoading && <LoaderBig />}\n      <RegisterForm />\n    </>\n  );\n};\n\nexport default Register;\n"],"names":["fadeIn","keyframes","Container","styled","FormBox","Form","Title","Label","Text","Input","Field","ErrorMessageText","SubmitButton","title","fields","onSubmit","initialValues","reduce","acc","field","validationSchema","object","string","required","min","max","email","dispatch","useDispatch","values","resetForm","autoComplete","map","size","charAt","toUpperCase","slice","placeholder","type","name","component","AuthForm","password","register","isLoading","useAuth","LoaderBig","useLoaders","Helmet"],"sourceRoot":""}